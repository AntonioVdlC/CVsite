// JSHint Configuration File	
// See http://jshint.com/docs/ for more details

{

	// Maximum error(s) before stopping
	"maxerr": 50,

	/*
	 * ENFORCING
	 * -------------------
	 */

	// Prohibit bitwise operators
	"bitwise": true,
	
	// Identifiers must be in camelCase
	"camelcase": true,
	
	// Require {} for every new block or scope
	"curly": true,
	
	// Require triple equals (===) for comparison
	"eqeqeq": true,
	
	// Require filtering for..in loops with obj.hasOwnProperty()
	"forin": true,
	
	// Prohibit overwriting prototypes of native objects such as Array, Date etc.
	"freeze": true,

	// Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
	"immed": true,

	// Number of spaces to use for indentation
	"indent": 4,
	
	// Require variables/functions to be defined before being used
	"latedef": true,

	// Require capitalization of all constructor functions e.g. `new F()`
	"newcap": true,
	
	// Prohibit use of `arguments.caller` and `arguments.callee`
	"noarg": true,

	// Prohibit use of empty blocks
	"noempty": true,
	
	// Prohibit "non-breaking whitespace" characters.
	"nonbsp": true,

	// Prohibit use of constructors for side-effects (without assignment)
	"nonew": true,
	
	// Allow use of `++` & `--`
	"plusplus": false,
	
	// Require double quotes
	"quotmark": "double",

	// Require all non-global variables to be declared
	"undef": true,
	
	// Warn when variables are defined but never used
	"unused": true,

	// Require all functions to run in ES5 Strict Mode
	"strict": true, 

	// Max number of formal params allowed per function (none)
	"maxparams": false,
	
	// Max depth of nested blocks (within functions) (none)
	"maxdepth": false,
	
	// Max number of statements per function (none)
	"maxstatements": false,
	
	// Max cyclomatic complexity per function (none)
	"maxcomplexity": false,
	
	// Max number of characters per line
	"maxlen": 80,
	
	// Allow any var statements.
	"varstmt": false,


	/*
	 * RELAXING
	 * -------------------
	 */

	// Do no tolerate Automatic Semicolon Insertion (no semicolons)
	"asi": false,

	// Prohibit assignments where comparisons would be expected
	"boss": false,

	// Disallow debuger statements (e.g. browser breakpoints.) 
	"debug": false,
	
	// Tolerate use of `== null`
	"eqnull": true,

	// Allow ES5 syntax (ex: getters and setters)
	"es5": true,
	
	// Allow ES.next (ES6) syntax (ex: `const`)
	"esnext": true,
	
	// Disallow Mozilla specific syntax (extends and overrides esnext features)
	"moz": false,

	// Prohibit use of `eval` and `new Function()`
	"evil": false,
	
	// Prohibit `ExpressionStatement` as Programs
	"expr": false,
	
	// Prohibit defining variables inside control statements
	"funcscope": false,
	
	// Allow global "use strict" (also enables 'strict')
	"globalstrict": true,
	
	// Prohibit using the `__iterator__` property
	"iterator": false,
	
	// Prohibit omitting a semicolon for the last statement of a 1-line block
	"lastsemic": false,
	
	// Prohibit possibly unsafe line breakings
	"laxbreak": false,
	
	// Allow comma-first style coding
	"laxcomma": true,
	
	// Prohibit functions being defined in loops
	"loopfunc": false, 
	
	// Prohibit multi-line strings
	"multistr": true,
	
	// Prohibit generator functions with no yield statement in them.
	"noyield": false,
	
	// Prohibit invalid typeof operator values
	"notypeof": false,
	
	// Prohibit using the `__proto__` property
	"proto": false,
	
	// Prohibit script-targeted URLs
	"scripturl": false,
	
	// Prohibit re-define variables later in code e.g. `var x=1; x=2;`
	"shadow": false,
	
	// Prohibit using `[]` notation when it can still be expressed in dot notation
	"sub": false,
	
	// Prohibit `new function () { ... };` and `new Object;`
	"supernew": false,
	
	// Prohibit using this in a non-constructor function 
	"validthis": false,


	/*
	 * ENVIRONMENTS
	 * -------------------
	 */

	// Web Browser (window, document, etc)
	"browser": true,

	// Development/debugging (alert, confirm, etc)
	"devel": true,

	// Additional predefined global variables
	"globals": {
		"View": false,
		"_t": false
	}
}